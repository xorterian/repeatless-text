# -*- coding: utf-8 -*-
"""Repeatless Book.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z71s0_X-ByrkkDzo9cFqJ3_ydfd-5Ctj
"""

# Imports
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure

# Alphabet
abc = {
    'A': {
        'grid': [
         [0,0,0,0,0],
          [0,1,1,0],
          [1,0,0,1],
         [1,1,0,1,1],
          [0,0,0,0],
          [0,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    'B': {
        'grid': [
         [1,0,0,0,0],
          [1,0,0,0],
          [1,0,0,0],
         [1,0,0,0,0],
          [1,0,0,0],
          [1,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    'C': {
        'grid': [
         [0,0,0,0,0],
          [0,1,1,0],
          [1,0,0,0],
         [0,0,0,0,0],
          [1,0,0,0],
          [0,1,1,0],
            [0,0]
       ],
        'code': 0
   },
    'D': {
        'grid': [
         [1,0,0,0,0],
          [1,0,0,0],
          [0,1,0,0],
         [1,0,0,0,0],
          [0,1,0,0],
          [1,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    'E': {
        'grid': [
         [1,1,0,1,0],
          [0,0,0,0],
          [0,0,0,0],
         [1,1,0,0,0],
          [0,0,0,0],
          [0,0,0,0],
            [1,1]
       ],
        'code': 0
   },
    'F': {
        'grid': [
         [1,1,0,1,0],
          [0,0,0,0],
          [0,0,0,0],
         [1,1,0,0,0],
          [0,0,0,0],
          [0,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    'G': {
        'grid': [
         [0,0,0,0,0],
          [0,1,1,0],
          [1,0,0,0],
         [0,0,0,1,0],
          [1,0,0,1],
          [0,1,1,0],
            [0,0]
       ],
        'code': 0
   },
    'H': {
        'grid': [
         [1,0,0,0,1],
          [0,0,0,0],
          [0,0,0,0],
         [1,1,0,1,1],
          [0,0,0,0],
          [0,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    'I': {
        'grid': [
         [1,0,0,0,0],
          [0,0,0,0],
          [0,0,0,0],
         [1,0,0,0,0],
          [0,0,0,0],
          [0,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    'J': {
        'grid': [
         [0,0,1,0,0],
          [0,0,0,0],
          [0,0,0,0],
         [0,0,1,0,0],
          [0,0,0,0],
          [0,0,0,0],
            [1,0]
       ],
        'code': 0
   },
    'K': {
        'grid': [
         [1,0,0,0,0],
          [0,1,0,0],
          [1,0,0,0],
         [1,0,0,0,0],
          [1,0,0,0],
          [0,1,0,0],
            [0,0]
       ],
        'code': 0
   },
    'L': {
        'grid': [
         [1,0,0,0,0],
          [0,0,0,0],
          [0,0,0,0],
         [1,0,0,0,0],
          [0,0,0,0],
          [0,0,0,0],
            [1,0]
       ],
        'code': 0
   },
    'M': {
        'grid': [
         [1,0,0,0,1],
          [1,0,0,1],
          [0,1,1,0],
         [1,0,0,0,1],
          [0,0,0,0],
          [0,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    'N': {
        'grid': [
         [0,0,0,0,0],
          [0,0,0,0],
          [0,0,0,0],
         [1,0,1,0,0],
          [1,0,0,0],
          [0,1,0,0],
            [0,0]
       ],
        'code': 0
   },
    'O': {
        'grid': [
         [0,0,0,0,0],
          [0,1,1,0],
          [1,0,0,1],
         [0,0,0,0,0],
          [1,0,0,1],
          [0,1,1,0],
            [0,0]
       ],
        'code': 0
   },
    'P': {
        'grid': [
         [1,0,0,0,0],
          [1,0,0,0],
          [1,0,0,0],
         [1,0,0,0,0],
          [0,0,0,0],
          [0,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    'Q': {
        'grid': [
         [0,0,0,0,0],
          [0,1,1,0],
          [1,0,0,1],
         [0,0,0,0,0],
          [1,0,1,1],
          [0,1,1,1],
            [0,0]
       ],
        'code': 0
   },
    'R': {
        'grid': [
         [1,0,0,0,0],
          [1,0,0,0],
          [1,0,0,0],
         [1,0,0,0,0],
          [1,0,0,0],
          [0,1,0,0],
            [0,0]
       ],
        'code': 0
   },
    'S': {
        'grid': [
         [0,0,0,1,0],
          [0,1,0,0],
          [0,1,0,0],
         [0,0,0,0,0],
          [0,0,1,0],
          [0,0,1,0],
            [1,0]
       ],
        'code': 0
   },
    'T': {
        'grid': [
         [0,1,1,1,0],
          [0,0,0,0],
          [0,0,0,0],
         [0,0,1,0,0],
          [0,0,0,0],
          [0,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    'U': {
        'grid': [
         [1,0,0,0,1],
          [0,0,0,0],
          [0,0,0,0],
         [0,0,0,0,0],
          [1,0,0,1],
          [0,1,1,0],
            [0,0]
       ],
        'code': 0
   },
    'V': {
        'grid': [
         [0,0,0,0,0],
          [0,0,0,0],
          [0,0,0,0],
         [0,0,0,0,0],
          [1,0,0,1],
          [0,1,1,0],
            [0,0]
       ],
        'code': 0
   },
    'W': {
        'grid': [
         [1,0,0,0,1],
          [0,0,0,0],
          [0,0,0,0],
         [1,0,0,0,1],
          [0,1,1,0],
          [1,0,0,1],
            [0,0]
       ],
        'code': 0
   },
    'X': {
        'grid': [
         [0,0,0,0,0],
          [1,0,0,1],
          [0,1,1,0],
         [0,0,0,0,0],
          [0,1,1,0],
          [1,0,0,1],
            [0,0]
       ],
        'code': 0
   },
    'Y': {
        'grid': [
         [0,0,0,0,0],
          [1,0,0,1],
          [0,1,1,0],
         [0,0,1,0,0],
          [0,0,0,0],
          [0,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    'Z': {
        'grid': [
         [0,0,0,0,0],
          [0,0,0,0],
          [0,0,0,0],
         [0,1,0,0,0],
          [0,1,0,0],
          [1,0,0,0],
            [1,0]
       ],
        'code': 0
   },
    '0': {
        'grid': [
         [0,0,0,0,0],
          [0,1,1,0],
          [1,0,0,1],
         [0,0,0,0,0],
          [1,0,0,1],
          [0,1,1,0],
            [0,0]
       ],
        'code': 0
   },
    '1': {
        'grid': [
         [0,0,1,0,0],
          [0,1,0,0],
          [1,0,0,0],
         [0,0,1,0,0],
          [0,0,0,0],
          [0,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    '2': {
        'grid': [
         [0,0,0,0,0],
          [0,1,1,0],
          [1,0,0,1],
         [0,0,0,0,0],
          [0,0,0,1],
          [0,0,1,0],
            [0,1]
       ],
        'code': 0
   },
    '3': {
        'grid': [
         [0,0,0,0,0],
          [0,1,1,0],
          [0,0,1,0],
         [0,0,0,0,0],
          [0,0,1,0],
          [0,1,1,0],
            [0,0]
       ],
        'code': 0
   },
    '4': {
        'grid': [
         [0,0,1,0,0],
          [0,1,0,0],
          [1,0,0,0],
         [0,1,1,0,0],
          [0,0,0,0],
          [0,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    '5': {
        'grid': [
         [1,1,0,0,0],
          [0,0,0,0],
          [0,0,0,0],
         [0,1,0,0,0],
          [0,0,1,0],
          [0,1,1,0],
            [0,0]
       ],
        'code': 0
   },
    '6': {
        'grid': [
         [0,0,0,0,0],
          [0,1,1,0],
          [1,0,0,0],
         [0,1,1,0,0],
          [1,0,0,0],
          [0,1,0,0],
            [0,0]
       ],
        'code': 0
   },
    '7': {
        'grid': [
         [0,0,0,0,0],
          [0,0,0,0],
          [0,0,0,0],
         [0,1,0,0,0],
          [0,1,0,0],
          [1,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    '8': {
        'grid': [
         [0,0,0,0,0],
          [0,1,1,0],
          [0,1,1,0],
         [0,0,0,0,0],
          [0,1,1,0],
          [0,1,1,0],
            [0,0]
       ],
        'code': 0
   },
    '9': {
        'grid': [
         [0,0,1,1,1],
          [0,0,0,0],
          [0,0,0,0],
         [0,0,0,1,0],
          [0,0,0,1],
          [0,1,1,0],
            [0,0]
       ],
        'code': 0
   },
    '-': {
        'grid': [
         [0,0,0,0,0],
          [0,0,0,0],
          [0,0,0,0],
         [0,1,0,1,0],
          [0,0,0,0],
          [0,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    '?': {
        'grid': [
         [0,0,0,0,0],
          [0,1,1,0],
          [0,0,1,0],
         [0,0,1,0,0],
          [0,0,0,0],
          [0,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    ',': {
        'grid': [
         [0,0,0,0,0],
          [0,0,0,0],
          [0,0,0,0],
         [0,0,0,0,0],
          [0,0,0,0],
          [0,0,1,0],
            [0,0]
       ],
        'code': 0
   },
    ' ': {
        'grid': [
         [0,0,0,0,0],
          [0,0,0,0],
          [0,0,0,0],
         [0,0,0,0,0],
          [0,0,0,0],
          [0,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    '+': {
        'grid': [
         [0,0,1,0,0],
          [0,0,0,0],
          [0,0,0,0],
         [0,1,1,1,0],
          [0,0,0,0],
          [0,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    '*': {
        'grid': [
         [0,0,0,0,0],
          [0,0,0,0],
          [0,1,1,0],
         [0,0,0,0,0],
          [0,1,1,0],
          [0,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    '^': {
        'grid': [
         [0,0,0,0,0],
          [0,1,1,0],
          [0,0,0,0],
         [0,0,0,0,0],
          [0,0,0,0],
          [0,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    '(': {
        'grid': [
         [0,0,0,0,0],
          [0,0,0,0],
          [1,0,0,0],
         [0,0,0,0,0],
          [1,0,0,0],
          [0,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    ')': {
        'grid': [
         [0,0,0,0,0],
          [0,0,0,0],
          [0,0,0,1],
         [0,0,0,0,0],
          [0,0,0,1],
          [0,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    '=': {
        'grid': [
         [0,1,0,1,0],
          [0,0,0,0],
          [0,0,0,0],
         [0,1,0,1,0],
          [0,0,0,0],
          [0,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    '/': {
        'grid': [
         [0,0,0,0,0],
          [0,0,0,1],
          [0,0,1,0],
         [0,0,0,0,0],
          [0,1,0,0],
          [1,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    ':': {
        'grid': [
         [0,0,0,0,0],
          [0,0,0,0],
          [0,0,1,0],
         [0,0,0,0,0],
          [0,0,0,0],
          [0,0,1,0],
            [0,0]
       ],
        'code': 0
   },
    '÷': {
        'grid': [
         [0,0,0,0,0],
          [0,0,1,0],
          [0,0,0,0],
         [0,1,0,1,0],
          [0,0,0,0],
          [0,0,1,0],
            [0,0]
       ],
        'code': 0
   },
    '%': {
        'grid': [
         [0,0,0,0,0],
          [1,0,0,1],
          [0,0,1,0],
         [0,0,0,0,0],
          [0,1,0,0],
          [1,0,0,1],
            [0,0]
       ],
        'code': 0
   },
    "'": {
        'grid': [
         [0,0,0,0,0],
          [0,1,0,0],
          [0,0,0,0],
         [0,0,0,0,0],
          [0,0,0,0],
          [0,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    '"': {
        'grid': [
         [0,0,0,0,0],
          [0,1,0,1],
          [0,0,0,0],
         [0,0,0,0,0],
          [0,0,0,0],
          [0,0,0,0],
            [0,0]
       ],
        'code': 0
   },
    '°': {
        'grid': [
         [0,0,0,0,0],
          [0,1,1,0],
          [0,1,1,0],
         [0,0,0,0,0],
          [0,0,0,0],
          [0,0,0,0],
            [0,0]
       ],
        'code': 0
    },
    '#': {
        'grid': [
         [1,1,1,1,1],
          [1,1,1,1],
          [1,1,1,1],
         [1,1,1,1,1],
          [1,1,1,1],
          [1,1,1,1],
            [1,1]
       ],
        'code': 0
    }
}

# Calculate codes and a reverse dict for future stats
codes = {}
for char in abc.keys():
  li = []
  for r in abc[char]['grid']:
    li += r
  s = 0
  for i in range(len(li)):
    s += 2**i * li[i]
  abc[char]['code'] = s
  codes[s] = char

# Draw letter 'A'
grid = abc['A']['grid']
cursor = [0,0]
dx, dy = 1, -1
if grid[0][0]:
  plt.plot([cursor[0]+0, cursor[0]+0], [cursor[1]+0, cursor[1]+dy])
if grid[0][1]:
  plt.plot([cursor[0]+0, cursor[0]+dx], [cursor[1]+0, cursor[1]+0])
if grid[0][2]:
  plt.plot([cursor[0]+dx, cursor[0]+dx], [cursor[1]+0, cursor[1]+dy])
if grid[0][3]:
  plt.plot([cursor[0]+dx, cursor[0]+2*dx], [cursor[1]+0, cursor[1]+0])
if grid[0][4]:
  plt.plot([cursor[0]+2*dx, cursor[0]+2*dx], [cursor[1]+0, cursor[1]+dy])

if grid[1][0]:
  plt.plot([cursor[0]+0, cursor[0]+dx/2], [cursor[1]+0, cursor[1]+dy/2])
if grid[1][1]:
  plt.plot([cursor[0]+dx/2, cursor[0]+dx], [cursor[1]+dy/2, cursor[1]+0])
if grid[1][2]:
  plt.plot([cursor[0]+dx, cursor[0]+dx*3/2], [cursor[1]+0, cursor[1]++dy/2])
if grid[1][3]:
  plt.plot([cursor[0]+dx*3/2, cursor[0]+2*dx], [cursor[1]+dy/2, cursor[1]+0])

if grid[2][0]:
  plt.plot([cursor[0]+0, cursor[0]+dx/2], [cursor[1]+dy, cursor[1]+dy/2])
if grid[2][1]:
  plt.plot([cursor[0]+dx/2, cursor[0]+dx], [cursor[1]+dy/2, cursor[1]+dy])
if grid[2][2]:
  plt.plot([cursor[0]+dx, cursor[0]+dx*3/2], [cursor[1]+dy, cursor[1]+dy/2])
if grid[2][3]:
  plt.plot([cursor[0]+dx*3/2, cursor[0]+2*dx], [cursor[1]+dy/2, cursor[1]+dy])

if grid[3][0]:
  plt.plot([cursor[0]+0, cursor[0]+0], [cursor[1]+dy, cursor[1]+2*dy])
if grid[3][1]:
  plt.plot([cursor[0]+0, cursor[0]+dx], [cursor[1]+dy, cursor[1]+dy])
if grid[3][2]:
  plt.plot([cursor[0]+dx, cursor[0]+dx], [cursor[1]+dy, cursor[1]+2*dy])
if grid[3][3]:
  plt.plot([cursor[0]+dx, cursor[0]+2*dx], [cursor[1]+dy, cursor[1]+dy])
if grid[3][4]:
  plt.plot([cursor[0]+2*dx, cursor[0]+2*dx], [cursor[1]+dy, cursor[1]+2*dy])

if grid[4][0]:
  plt.plot([cursor[0]+0, cursor[0]+dx/2], [cursor[1]+dy+0, cursor[1]+dy+dy/2])
if grid[4][1]:
  plt.plot([cursor[0]+dx/2, cursor[0]+dx], [cursor[1]+dy+dy/2, cursor[1]+dy])
if grid[4][2]:
  plt.plot([cursor[0]+dx, cursor[0]+dx*3/2], [cursor[1]+dy, cursor[1]+dy+dy/2])
if grid[4][3]:
  plt.plot([cursor[0]+dx*3/2, cursor[0]+2*dx], [cursor[1]+dy+dy/2, cursor[1]+dy])

if grid[5][0]:
  plt.plot([cursor[0]+0, cursor[0]+dx/2], [cursor[1]+dy*2, cursor[1]+dy/2+dy])
if grid[5][1]:
  plt.plot([cursor[0]+dx/2, cursor[0]+dx], [cursor[1]+dy/2+dy, cursor[1]+dy*2])
if grid[5][2]:
  plt.plot([cursor[0]+dx, cursor[0]+dx*3/2], [cursor[1]+dy*2, cursor[1]+dy/2+dy])
if grid[5][3]:
  plt.plot([cursor[0]+dx*3/2, cursor[0]+2*dx], [cursor[1]+dy/2+dy, cursor[1]+dy*2])

if grid[6][0]:
  plt.plot([cursor[0]+0, cursor[0]+dx], [cursor[1]+2*dy, cursor[1]+2*dy])
if grid[6][1]:
  plt.plot([cursor[0]+dx, cursor[0]+2*dx], [cursor[1]+2*dy, cursor[1]+2*dy])

plt.show()

# Remove some special character
def text_transform(text):
  return text.upper().replace('Ó','O').replace('Ö','O').replace('Ő','O').replace('Ú','U').replace('Ü','U').replace('Ű','U').replace('Á','A').replace('É','E').replace('@','A').replace('<','(').replace('>',')').replace('.',',').replace('!','I').replace('Í','I').replace('\n',' ').replace('  ',' ').replace(' ','#')

# Xoration of the grids of two chars
def grid_xor(g1, g2):
  g3 = []
  for i in range(len(g1)):
    r = []
    for j in range(len(g1[i])):
      r.append(g1[i][j]^g2[i][j])
    g3.append(r)
  return g3

# Draw a Nietzsche quote
text = text_transform("God is dead.")
dx, dy = 1, -1
cursor = [0,0]
s = 0
L = 7
for c in text:
  grid = abc[c]['grid']
  s+=1
  cursor = [(s%L)*2*dx*1.5,(s//L)*2*dy*1.5]
  if grid[0][0]:
    plt.plot([cursor[0]+0, cursor[0]+0], [cursor[1]+0, cursor[1]+dy])
  if grid[0][1]:
    plt.plot([cursor[0]+0, cursor[0]+dx], [cursor[1]+0, cursor[1]+0])
  if grid[0][2]:
    plt.plot([cursor[0]+dx, cursor[0]+dx], [cursor[1]+0, cursor[1]+dy])
  if grid[0][3]:
    plt.plot([cursor[0]+dx, cursor[0]+2*dx], [cursor[1]+0, cursor[1]+0])
  if grid[0][4]:
    plt.plot([cursor[0]+2*dx, cursor[0]+2*dx], [cursor[1]+0, cursor[1]+dy])

  if grid[1][0]:
    plt.plot([cursor[0]+0, cursor[0]+dx/2], [cursor[1]+0, cursor[1]+dy/2])
  if grid[1][1]:
    plt.plot([cursor[0]+dx/2, cursor[0]+dx], [cursor[1]+dy/2, cursor[1]+0])
  if grid[1][2]:
    plt.plot([cursor[0]+dx, cursor[0]+dx*3/2], [cursor[1]+0, cursor[1]++dy/2])
  if grid[1][3]:
    plt.plot([cursor[0]+dx*3/2, cursor[0]+2*dx], [cursor[1]+dy/2, cursor[1]+0])

  if grid[2][0]:
    plt.plot([cursor[0]+0, cursor[0]+dx/2], [cursor[1]+dy, cursor[1]+dy/2])
  if grid[2][1]:
    plt.plot([cursor[0]+dx/2, cursor[0]+dx], [cursor[1]+dy/2, cursor[1]+dy])
  if grid[2][2]:
    plt.plot([cursor[0]+dx, cursor[0]+dx*3/2], [cursor[1]+dy, cursor[1]+dy/2])
  if grid[2][3]:
    plt.plot([cursor[0]+dx*3/2, cursor[0]+2*dx], [cursor[1]+dy/2, cursor[1]+dy])

  if grid[3][0]:
    plt.plot([cursor[0]+0, cursor[0]+0], [cursor[1]+dy, cursor[1]+2*dy])
  if grid[3][1]:
    plt.plot([cursor[0]+0, cursor[0]+dx], [cursor[1]+dy, cursor[1]+dy])
  if grid[3][2]:
    plt.plot([cursor[0]+dx, cursor[0]+dx], [cursor[1]+dy, cursor[1]+2*dy])
  if grid[3][3]:
    plt.plot([cursor[0]+dx, cursor[0]+2*dx], [cursor[1]+dy, cursor[1]+dy])
  if grid[3][4]:
    plt.plot([cursor[0]+2*dx, cursor[0]+2*dx], [cursor[1]+dy, cursor[1]+2*dy])

  if grid[4][0]:
    plt.plot([cursor[0]+0, cursor[0]+dx/2], [cursor[1]+dy+0, cursor[1]+dy+dy/2])
  if grid[4][1]:
    plt.plot([cursor[0]+dx/2, cursor[0]+dx], [cursor[1]+dy+dy/2, cursor[1]+dy])
  if grid[4][2]:
    plt.plot([cursor[0]+dx, cursor[0]+dx*3/2], [cursor[1]+dy, cursor[1]+dy+dy/2])
  if grid[4][3]:
    plt.plot([cursor[0]+dx*3/2, cursor[0]+2*dx], [cursor[1]+dy+dy/2, cursor[1]+dy])

  if grid[5][0]:
    plt.plot([cursor[0]+0, cursor[0]+dx/2], [cursor[1]+dy*2, cursor[1]+dy/2+dy])
  if grid[5][1]:
    plt.plot([cursor[0]+dx/2, cursor[0]+dx], [cursor[1]+dy/2+dy, cursor[1]+dy*2])
  if grid[5][2]:
    plt.plot([cursor[0]+dx, cursor[0]+dx*3/2], [cursor[1]+dy*2, cursor[1]+dy/2+dy])
  if grid[5][3]:
    plt.plot([cursor[0]+dx*3/2, cursor[0]+2*dx], [cursor[1]+dy/2+dy, cursor[1]+dy*2])

  if grid[6][0]:
    plt.plot([cursor[0]+0, cursor[0]+dx], [cursor[1]+2*dy, cursor[1]+2*dy])
  if grid[6][1]:
    plt.plot([cursor[0]+dx, cursor[0]+2*dx], [cursor[1]+2*dy, cursor[1]+2*dy])

plt.show()


# Draw the xor-chaining of a quote from a Mihail Bulgakov book
text = text_transform(""" 'Among other things I said,' continued the prisoner, ' that all power
is a form of violence exercised over people and that the time will come when
there will be no rule by Caesar nor any other form of rule. Man will pass
into the kingdom of truth and justice where no sort of power will be
needed.'""")
dx, dy = 1, -1
cursor = [0,0]
s = 0
L = 20
grid = abc[' ']['grid']
for c in text:
  grid = grid_xor(grid, abc[c]['grid'])
  s+=1
  cursor = [(s%L)*2*dx*1.5,(s//L)*2*dy*1.85]
  if grid[0][0]:
    plt.plot([cursor[0]+0, cursor[0]+0], [cursor[1]+0, cursor[1]+dy])
  if grid[0][1]:
    plt.plot([cursor[0]+0, cursor[0]+dx], [cursor[1]+0, cursor[1]+0])
  if grid[0][2]:
    plt.plot([cursor[0]+dx, cursor[0]+dx], [cursor[1]+0, cursor[1]+dy])
  if grid[0][3]:
    plt.plot([cursor[0]+dx, cursor[0]+2*dx], [cursor[1]+0, cursor[1]+0])
  if grid[0][4]:
    plt.plot([cursor[0]+2*dx, cursor[0]+2*dx], [cursor[1]+0, cursor[1]+dy])

  if grid[1][0]:
    plt.plot([cursor[0]+0, cursor[0]+dx/2], [cursor[1]+0, cursor[1]+dy/2])
  if grid[1][1]:
    plt.plot([cursor[0]+dx/2, cursor[0]+dx], [cursor[1]+dy/2, cursor[1]+0])
  if grid[1][2]:
    plt.plot([cursor[0]+dx, cursor[0]+dx*3/2], [cursor[1]+0, cursor[1]++dy/2])
  if grid[1][3]:
    plt.plot([cursor[0]+dx*3/2, cursor[0]+2*dx], [cursor[1]+dy/2, cursor[1]+0])

  if grid[2][0]:
    plt.plot([cursor[0]+0, cursor[0]+dx/2], [cursor[1]+dy, cursor[1]+dy/2])
  if grid[2][1]:
    plt.plot([cursor[0]+dx/2, cursor[0]+dx], [cursor[1]+dy/2, cursor[1]+dy])
  if grid[2][2]:
    plt.plot([cursor[0]+dx, cursor[0]+dx*3/2], [cursor[1]+dy, cursor[1]+dy/2])
  if grid[2][3]:
    plt.plot([cursor[0]+dx*3/2, cursor[0]+2*dx], [cursor[1]+dy/2, cursor[1]+dy])

  if grid[3][0]:
    plt.plot([cursor[0]+0, cursor[0]+0], [cursor[1]+dy, cursor[1]+2*dy])
  if grid[3][1]:
    plt.plot([cursor[0]+0, cursor[0]+dx], [cursor[1]+dy, cursor[1]+dy])
  if grid[3][2]:
    plt.plot([cursor[0]+dx, cursor[0]+dx], [cursor[1]+dy, cursor[1]+2*dy])
  if grid[3][3]:
    plt.plot([cursor[0]+dx, cursor[0]+2*dx], [cursor[1]+dy, cursor[1]+dy])
  if grid[3][4]:
    plt.plot([cursor[0]+2*dx, cursor[0]+2*dx], [cursor[1]+dy, cursor[1]+2*dy])

  if grid[4][0]:
    plt.plot([cursor[0]+0, cursor[0]+dx/2], [cursor[1]+dy+0, cursor[1]+dy+dy/2])
  if grid[4][1]:
    plt.plot([cursor[0]+dx/2, cursor[0]+dx], [cursor[1]+dy+dy/2, cursor[1]+dy])
  if grid[4][2]:
    plt.plot([cursor[0]+dx, cursor[0]+dx*3/2], [cursor[1]+dy, cursor[1]+dy+dy/2])
  if grid[4][3]:
    plt.plot([cursor[0]+dx*3/2, cursor[0]+2*dx], [cursor[1]+dy+dy/2, cursor[1]+dy])

  if grid[5][0]:
    plt.plot([cursor[0]+0, cursor[0]+dx/2], [cursor[1]+dy*2, cursor[1]+dy/2+dy])
  if grid[5][1]:
    plt.plot([cursor[0]+dx/2, cursor[0]+dx], [cursor[1]+dy/2+dy, cursor[1]+dy*2])
  if grid[5][2]:
    plt.plot([cursor[0]+dx, cursor[0]+dx*3/2], [cursor[1]+dy*2, cursor[1]+dy/2+dy])
  if grid[5][3]:
    plt.plot([cursor[0]+dx*3/2, cursor[0]+2*dx], [cursor[1]+dy/2+dy, cursor[1]+dy*2])

  if grid[6][0]:
    plt.plot([cursor[0]+0, cursor[0]+dx], [cursor[1]+2*dy, cursor[1]+2*dy])
  if grid[6][1]:
    plt.plot([cursor[0]+dx, cursor[0]+2*dx], [cursor[1]+2*dy, cursor[1]+2*dy])

figure(figsize=(L, s//L), dpi=60)
plt.show()
# You can read the original text how you make pairwise the xoration of the characters by your mental skills.
